
// クリエイトスライスをインポートしている
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchCount } from './counterAPI';

// counterSliceで使用する初期値用定数 Stateの中身を指定
const initialState = {
  // idを連番で持つようにする変数


  // 初期task
  tasks:[
    {
      id: 1,
      title: "task A",
      completed: false,
    },
    {
      id: 2,
      title: "task B",
      completed: false,
    },
    {
      id: 3,
      title: "task C",
      completed: true,
    },
  ]
};

export const incrementAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await fetchCount(amount);
    return response.data;
  }
);

// クリエイトスライスを定義
export const taskSlice = createSlice({
  name: 'task',

  // 定義したinitialStateを使用
  initialState,

  // 処理郡
  reducers: {
    // タスク作成
    newTask: (state, action) => {
      state.value += 1;
    },
    // デクリメントアクション ()
    decrement: (state) => {
      state.value -= 1;
    },

    // 現在のstateとaction(payloadという属性を持っている *引数のようなもの)
    // actionのpayloadをstateへ追加する
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

// 各関数を使用でいるようにexportする
export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// stateの値を参照できるようにexportする
export const selectCount = (state) => state.counter.value;


export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

// app.jsで呼び出される
export default counterSlice.reducer;
